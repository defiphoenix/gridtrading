{"ast":null,"code":"import _slicedToArray from\"/Users/ys/Documents/grid-trading/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from\"react\";// let socket; // 소켓\n// 웹소켓 연결\nimport{jsx as _jsx}from\"react/jsx-runtime\";function CreatSocketConnection(type,conncectType,dataMaker){var SUCCESS=\"\".concat(type,\"_SUCCESS\");var ERROR=\"\".concat(type,\"_ERROR\");var payload=0;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var socket=new WebSocket(\"wss://api.upbit.com/websocket/v1\");socket.binaryType=\"arraybuffer\";socket.onopen=function(){//console.log(\"?\");\nsocket.send(JSON.stringify([{ticket:\"UNIQUE_TICKET\"},{type:\"ticker\",codes:[\"KRW-BTC\"]},// \"KRW-BTC\",\"KRW-ETH\" -> parsing\n{type:\"orderbook\",codes:[\"KRW-BTC\"]},{type:\"trade\",codes:[\"KRW-BTC\"]}]));};socket.onmessage=function(e){//console.log(\"message\");\nvar enc=new TextDecoder(\"utf-8\");var arr=new Uint8Array(e.data);var str_d=enc.decode(arr);var d=JSON.parse(str_d);if(d.type===\"ticker\"){// 현재가 데이터\nsetData(d.trade_price);// TOD\n//console.log(d.opening_price);\n// payload = d.opening_price;\n}if(d.type==\"orderbook\"){// 호가 데이터\n// TODO\n}if(d.type==\"trade\"){// 체결 데이터\n// TODO\n}};socket.onerror=function(e){console.log(e);};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"h1\",{children:data})});}//   return () => (dispatch, getState) => {\n//     let socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n//     socket.binaryType = \"arraybuffer\";\n//     //socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n//     //socket.binaryType = \"arraybuffer\";\n//     socket.onopen = () => {\n//       console.log(\"?\");\n//       socket.send(\n//         JSON.stringify([\n//           { ticket: \"UNIQUE_TICKET\" },\n//           { type: \"ticker\", codes: [\"KRW-BTC\"] }, // \"KRW-BTC\",\"KRW-ETH\" -> parsing\n//           { type: \"orderbook\", codes: [\"KRW-BTC\"] },\n//           { type: \"trade\", codes: [\"KRW-BTC\"] },\n//         ])\n//       );\n//     };\n//     socket.onclose = function (e) {\n//       socket = undefined;\n//     };\n//     socket.onmessage = (e) => {\n//       console.log(\"?\");\n//       var enc = new TextDecoder(\"utf-8\");\n//       var arr = new Uint8Array(e.data);\n//       var str_d = enc.decode(arr);\n//       var d = JSON.parse(str_d);\n//       const state = getState();\n//       if (d.type == \"ticker\") {\n//         dispatch({ type: SUCCESS, payload: state });\n//         // 현재가 데이터\n//         // TOD\n//         console.log(\"yay\");\n//       }\n//       if (d.type == \"orderbook\") {\n//         // 호가 데이터\n//         // TODO\n//       }\n//       if (d.type == \"trade\") {\n//         // 체결 데이터\n//         // TODO\n//       }\n//     };\n//     socket.onerror = (e) => {\n//       dispatch({ type: ERROR, payload: e });\n//     };\n//   };\n// function closeWS() {\n//   if (socket != undefined) {\n//     socket.close();\n//     socket = undefined;\n//   }\n// }\nexport default CreatSocketConnection;","map":{"version":3,"names":["useState","CreatSocketConnection","type","conncectType","dataMaker","SUCCESS","ERROR","payload","data","setData","socket","WebSocket","binaryType","onopen","send","JSON","stringify","ticket","codes","onmessage","e","enc","TextDecoder","arr","Uint8Array","str_d","decode","d","parse","trade_price","onerror","console","log"],"sources":["/Users/ys/Documents/grid-trading/src/connect.js"],"sourcesContent":["import { useState } from \"react\";\n\n// let socket; // 소켓\n\n// 웹소켓 연결\nfunction CreatSocketConnection(type, conncectType, dataMaker) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const ERROR = `${type}_ERROR`;\n  let payload = 0;\n  const [data, setData] = useState(\"\");\n  let socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n  socket.binaryType = \"arraybuffer\";\n\n  socket.onopen = () => {\n    //console.log(\"?\");\n    socket.send(\n      JSON.stringify([\n        { ticket: \"UNIQUE_TICKET\" },\n        { type: \"ticker\", codes: [\"KRW-BTC\"] }, // \"KRW-BTC\",\"KRW-ETH\" -> parsing\n        { type: \"orderbook\", codes: [\"KRW-BTC\"] },\n        { type: \"trade\", codes: [\"KRW-BTC\"] },\n      ])\n    );\n  };\n\n  socket.onmessage = (e) => {\n    //console.log(\"message\");\n    var enc = new TextDecoder(\"utf-8\");\n    var arr = new Uint8Array(e.data);\n    var str_d = enc.decode(arr);\n    var d = JSON.parse(str_d);\n    if (d.type === \"ticker\") {\n      // 현재가 데이터\n      setData(d.trade_price);\n      // TOD\n      //console.log(d.opening_price);\n      // payload = d.opening_price;\n    }\n    if (d.type == \"orderbook\") {\n      // 호가 데이터\n      // TODO\n    }\n    if (d.type == \"trade\") {\n      // 체결 데이터\n      // TODO\n    }\n  };\n  socket.onerror = (e) => {\n    console.log(e);\n  };\n  return (\n    <div>\n      <h1>{data}</h1>\n    </div>\n  );\n}\n\n//   return () => (dispatch, getState) => {\n//     let socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n//     socket.binaryType = \"arraybuffer\";\n\n//     //socket = new WebSocket(\"wss://api.upbit.com/websocket/v1\");\n//     //socket.binaryType = \"arraybuffer\";\n\n//     socket.onopen = () => {\n//       console.log(\"?\");\n//       socket.send(\n//         JSON.stringify([\n//           { ticket: \"UNIQUE_TICKET\" },\n//           { type: \"ticker\", codes: [\"KRW-BTC\"] }, // \"KRW-BTC\",\"KRW-ETH\" -> parsing\n//           { type: \"orderbook\", codes: [\"KRW-BTC\"] },\n//           { type: \"trade\", codes: [\"KRW-BTC\"] },\n//         ])\n//       );\n//     };\n\n//     socket.onclose = function (e) {\n//       socket = undefined;\n//     };\n\n//     socket.onmessage = (e) => {\n//       console.log(\"?\");\n//       var enc = new TextDecoder(\"utf-8\");\n//       var arr = new Uint8Array(e.data);\n//       var str_d = enc.decode(arr);\n//       var d = JSON.parse(str_d);\n//       const state = getState();\n//       if (d.type == \"ticker\") {\n//         dispatch({ type: SUCCESS, payload: state });\n//         // 현재가 데이터\n//         // TOD\n//         console.log(\"yay\");\n//       }\n//       if (d.type == \"orderbook\") {\n//         // 호가 데이터\n//         // TODO\n//       }\n//       if (d.type == \"trade\") {\n//         // 체결 데이터\n//         // TODO\n//       }\n//     };\n//     socket.onerror = (e) => {\n//       dispatch({ type: ERROR, payload: e });\n//     };\n//   };\n\n// function closeWS() {\n//   if (socket != undefined) {\n//     socket.close();\n//     socket = undefined;\n//   }\n// }\n\nexport default CreatSocketConnection;\n"],"mappings":"sHAAA,OAASA,QAAT,KAAyB,OAAzB,CAEA;AAEA;2CACA,QAASC,sBAAT,CAA+BC,IAA/B,CAAqCC,YAArC,CAAmDC,SAAnD,CAA8D,CAC5D,GAAMC,QAAO,WAAMH,IAAN,YAAb,CACA,GAAMI,MAAK,WAAMJ,IAAN,UAAX,CACA,GAAIK,QAAO,CAAG,CAAd,CACA,cAAwBP,QAAQ,CAAC,EAAD,CAAhC,wCAAOQ,IAAP,eAAaC,OAAb,eACA,GAAIC,OAAM,CAAG,GAAIC,UAAJ,CAAc,kCAAd,CAAb,CACAD,MAAM,CAACE,UAAP,CAAoB,aAApB,CAEAF,MAAM,CAACG,MAAP,CAAgB,UAAM,CACpB;AACAH,MAAM,CAACI,IAAP,CACEC,IAAI,CAACC,SAAL,CAAe,CACb,CAAEC,MAAM,CAAE,eAAV,CADa,CAEb,CAAEf,IAAI,CAAE,QAAR,CAAkBgB,KAAK,CAAE,CAAC,SAAD,CAAzB,CAFa,CAE2B;AACxC,CAAEhB,IAAI,CAAE,WAAR,CAAqBgB,KAAK,CAAE,CAAC,SAAD,CAA5B,CAHa,CAIb,CAAEhB,IAAI,CAAE,OAAR,CAAiBgB,KAAK,CAAE,CAAC,SAAD,CAAxB,CAJa,CAAf,CADF,EAQD,CAVD,CAYAR,MAAM,CAACS,SAAP,CAAmB,SAACC,CAAD,CAAO,CACxB;AACA,GAAIC,IAAG,CAAG,GAAIC,YAAJ,CAAgB,OAAhB,CAAV,CACA,GAAIC,IAAG,CAAG,GAAIC,WAAJ,CAAeJ,CAAC,CAACZ,IAAjB,CAAV,CACA,GAAIiB,MAAK,CAAGJ,GAAG,CAACK,MAAJ,CAAWH,GAAX,CAAZ,CACA,GAAII,EAAC,CAAGZ,IAAI,CAACa,KAAL,CAAWH,KAAX,CAAR,CACA,GAAIE,CAAC,CAACzB,IAAF,GAAW,QAAf,CAAyB,CACvB;AACAO,OAAO,CAACkB,CAAC,CAACE,WAAH,CAAP,CACA;AACA;AACA;AACD,CACD,GAAIF,CAAC,CAACzB,IAAF,EAAU,WAAd,CAA2B,CACzB;AACA;AACD,CACD,GAAIyB,CAAC,CAACzB,IAAF,EAAU,OAAd,CAAuB,CACrB;AACA;AACD,CACF,CArBD,CAsBAQ,MAAM,CAACoB,OAAP,CAAiB,SAACV,CAAD,CAAO,CACtBW,OAAO,CAACC,GAAR,CAAYZ,CAAZ,EACD,CAFD,CAGA,mBACE,kCACE,oBAAKZ,IAAL,EADF,EADF,CAKD,CAED;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,cAAeP,sBAAf"},"metadata":{},"sourceType":"module"}