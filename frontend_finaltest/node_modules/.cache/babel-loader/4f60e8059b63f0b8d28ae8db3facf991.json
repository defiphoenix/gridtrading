{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nexport async function test(formData) {\n  const options = {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\"\n    }\n  };\n  console.log(\"api뭐야\");\n  let body;\n  const response = await fetch(\"https://api.upbit.com/v1/candles/minutes/1?market=KRW-BTC&count=1\", options).then(response => response.json()).catch(err => console.error(err)); // console.log(body);\n  // const body = await response.json();\n\n  return body;\n}\nexport async function startTrading(formData) {\n  console.log(\"테스트트레이딩\"); // const BASE_URL = \"\";\n\n  const BASE_URL = \"https://learn.codeit.kr/api/foods\";\n  const response = await fetch(`${BASE_URL}`, {\n    method: \"POST\",\n    body: formData\n  }).then(response => response.json()).then(response => console.log(response)).catch(err => console.error(err));\n\n  if (!response.ok) {\n    throw new Error(\"데이터를 생성하는데 실패했습니다\");\n  }\n\n  const body = await response.json();\n  console.log(body);\n  return body;\n}\nexport async function ChartDraw() {\n  const options = {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\"\n    }\n  };\n  fetch(\"https://api.upbit.com/v1/candles/minutes/1?market=KRW-BTC&count=1\", options).then(response => response.json()).then(response => console.log(response)).catch(err => console.error(err));\n}\n_c = ChartDraw;\n\nconst useInterval = (callback, delay) => {\n  _s();\n\n  const savedCallback = useRef(null);\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n  useEffect(() => {\n    const executeCallback = () => {\n      savedCallback.current();\n    };\n\n    const timerId = setInterval(executeCallback, delay);\n    return () => clearInterval(timerId);\n  }, []);\n};\n\n_s(useInterval, \"dqNZMqbncP+HtqBlD20aSNv0Ugk=\");\n\nexport default useInterval;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartDraw\");","map":{"version":3,"names":["useEffect","useState","test","formData","options","method","headers","Accept","console","log","body","response","fetch","then","json","catch","err","error","startTrading","BASE_URL","ok","Error","ChartDraw","useInterval","callback","delay","savedCallback","useRef","current","executeCallback","timerId","setInterval","clearInterval"],"sources":["/Users/ys/Documents/grid-trading/src/api.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport async function test(formData) {\n  const options = { method: \"GET\", headers: { Accept: \"application/json\" } };\n  console.log(\"api뭐야\");\n  let body;\n  const response = await fetch(\n    \"https://api.upbit.com/v1/candles/minutes/1?market=KRW-BTC&count=1\",\n    options\n  )\n    .then((response) => response.json())\n    .catch((err) => console.error(err));\n\n  // console.log(body);\n  // const body = await response.json();\n  return body;\n}\n\nexport async function startTrading(formData) {\n  console.log(\"테스트트레이딩\");\n  // const BASE_URL = \"\";\n  const BASE_URL = \"https://learn.codeit.kr/api/foods\";\n  const response = await fetch(`${BASE_URL}`, {\n    method: \"POST\",\n    body: formData,\n  })\n    .then((response) => response.json())\n    .then((response) => console.log(response))\n    .catch((err) => console.error(err));\n  if (!response.ok) {\n    throw new Error(\"데이터를 생성하는데 실패했습니다\");\n  }\n  const body = await response.json();\n  console.log(body);\n  return body;\n}\n\nexport async function ChartDraw() {\n  const options = { method: \"GET\", headers: { Accept: \"application/json\" } };\n\n  fetch(\n    \"https://api.upbit.com/v1/candles/minutes/1?market=KRW-BTC&count=1\",\n    options\n  )\n    .then((response) => response.json())\n    .then((response) => console.log(response))\n    .catch((err) => console.error(err));\n}\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef(null);\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const executeCallback = () => {\n      savedCallback.current();\n    };\n\n    const timerId = setInterval(executeCallback, delay);\n\n    return () => clearInterval(timerId);\n  }, []);\n};\n\nexport default useInterval;\n"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,eAAeC,IAAf,CAAoBC,QAApB,EAA8B;EACnC,MAAMC,OAAO,GAAG;IAAEC,MAAM,EAAE,KAAV;IAAiBC,OAAO,EAAE;MAAEC,MAAM,EAAE;IAAV;EAA1B,CAAhB;EACAC,OAAO,CAACC,GAAR,CAAY,OAAZ;EACA,IAAIC,IAAJ;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,mEAD0B,EAE1BR,OAF0B,CAAL,CAIpBS,IAJoB,CAIdF,QAAD,IAAcA,QAAQ,CAACG,IAAT,EAJC,EAKpBC,KALoB,CAKbC,GAAD,IAASR,OAAO,CAACS,KAAR,CAAcD,GAAd,CALK,CAAvB,CAJmC,CAWnC;EACA;;EACA,OAAON,IAAP;AACD;AAED,OAAO,eAAeQ,YAAf,CAA4Bf,QAA5B,EAAsC;EAC3CK,OAAO,CAACC,GAAR,CAAY,SAAZ,EAD2C,CAE3C;;EACA,MAAMU,QAAQ,GAAG,mCAAjB;EACA,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEO,QAAS,EAAb,EAAgB;IAC1Cd,MAAM,EAAE,MADkC;IAE1CK,IAAI,EAAEP;EAFoC,CAAhB,CAAL,CAIpBU,IAJoB,CAIdF,QAAD,IAAcA,QAAQ,CAACG,IAAT,EAJC,EAKpBD,IALoB,CAKdF,QAAD,IAAcH,OAAO,CAACC,GAAR,CAAYE,QAAZ,CALC,EAMpBI,KANoB,CAMbC,GAAD,IAASR,OAAO,CAACS,KAAR,CAAcD,GAAd,CANK,CAAvB;;EAOA,IAAI,CAACL,QAAQ,CAACS,EAAd,EAAkB;IAChB,MAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;EACD;;EACD,MAAMX,IAAI,GAAG,MAAMC,QAAQ,CAACG,IAAT,EAAnB;EACAN,OAAO,CAACC,GAAR,CAAYC,IAAZ;EACA,OAAOA,IAAP;AACD;AAED,OAAO,eAAeY,SAAf,GAA2B;EAChC,MAAMlB,OAAO,GAAG;IAAEC,MAAM,EAAE,KAAV;IAAiBC,OAAO,EAAE;MAAEC,MAAM,EAAE;IAAV;EAA1B,CAAhB;EAEAK,KAAK,CACH,mEADG,EAEHR,OAFG,CAAL,CAIGS,IAJH,CAISF,QAAD,IAAcA,QAAQ,CAACG,IAAT,EAJtB,EAKGD,IALH,CAKSF,QAAD,IAAcH,OAAO,CAACC,GAAR,CAAYE,QAAZ,CALtB,EAMGI,KANH,CAMUC,GAAD,IAASR,OAAO,CAACS,KAAR,CAAcD,GAAd,CANlB;AAOD;KAVqBM,S;;AAYtB,MAAMC,WAAW,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;EAAA;;EACvC,MAAMC,aAAa,GAAGC,MAAM,CAAC,IAAD,CAA5B;EAEA3B,SAAS,CAAC,MAAM;IACd0B,aAAa,CAACE,OAAd,GAAwBJ,QAAxB;EACD,CAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;EAIAxB,SAAS,CAAC,MAAM;IACd,MAAM6B,eAAe,GAAG,MAAM;MAC5BH,aAAa,CAACE,OAAd;IACD,CAFD;;IAIA,MAAME,OAAO,GAAGC,WAAW,CAACF,eAAD,EAAkBJ,KAAlB,CAA3B;IAEA,OAAO,MAAMO,aAAa,CAACF,OAAD,CAA1B;EACD,CARQ,EAQN,EARM,CAAT;AASD,CAhBD;;GAAMP,W;;AAkBN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}